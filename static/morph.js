// Generated by CoffeeScript 1.10.0
var cancelEdit1, cancelEdit2, clearPopUp1, clearPopUp2, container1, container2, data1, data2, edges1, edges2, network1, network2, nodes1, nodes2, options1, options2, p1_url, p2_url, saveData1, saveData2;

p1_url = '';

p2_url = '';

Dropzone.autoDiscover = false;

$('.owl-carousel').hide();

$("div#upload1").dropzone({
  url: '/upload',
  success: function(f, response) {
    $('div#upload1').hide();
    p1_url = response;
    $('#wrapper1 .network').css('background-image', 'url("' + p1_url + '")');
    return $('div#wrapper1').show();
  }
});

$("div#upload2").dropzone({
  url: '/upload',
  success: function(f, response) {
    $('div#upload2').hide();
    p2_url = response;
    $('#wrapper2 .network').css('background-image', 'url("' + p2_url + '")');
    return $('div#wrapper2').show();
  }
});

clearPopUp1 = function() {
  document.querySelector('#wrapper1 .saveButton').onclick = null;
  document.querySelector('#wrapper1 .cancelButton').onclick = null;
  return document.querySelector('#wrapper1 .network-popUp').style.display = 'none';
};

saveData1 = function(data, callback) {
  data.id = document.querySelector('#wrapper1 .node-id').value;
  data.label = document.querySelector('#wrapper1 .node-label').value;
  clearPopUp1();
  return callback(data);
};

cancelEdit1 = function(callback) {
  clearPopUp1();
  return callback(null);
};

container1 = document.querySelector('#wrapper1 .network');

options1 = {
  width: '600px',
  height: '800px',
  autoResize: false,
  interaction: {
    dragView: false,
    zoomView: false
  },
  manipulation: {
    enabled: true,
    initiallyActive: true,
    addNode: function(data, callback) {
      document.querySelector('#wrapper1 .operation').innerHTML = "Add Node";
      document.querySelector('#wrapper1 .node-id').value = data.id;
      document.querySelector('#wrapper1 .node-label').value = data.label;
      document.querySelector('#wrapper1 .saveButton').onclick = saveData1.bind(this, data, callback);
      document.querySelector('#wrapper1 .cancelButton').onclick = clearPopUp1.bind();
      return document.querySelector('#wrapper1 .network-popUp').style.display = 'block';
    },
    editNode: function(data, callback) {
      document.querySelector('#wrapper1 .operation').innerHTML = "Edit Node";
      document.querySelector('#wrapper1 .node-id').value = data.id;
      document.querySelector('#wrapper1 .node-label').value = data.label;
      document.querySelector('#wrapper1 .saveButton').onclick = saveData1.bind(this, data, callback);
      document.querySelector('#wrapper1 .cancelButton').onclick = cancelEdit1.bind(this, callback);
      return document.querySelector('#wrapper1 .network-popUp').style.display = 'block';
    },
    addEdge: false,
    editEdge: true,
    deleteNode: true,
    deleteEdge: true,
    controlNodeStyle: {}
  },
  physics: {
    enabled: false
  },
  edges: {
    smooth: false,
    color: {
      color: '#2B7CE9',
      highlight: '#2B7CE9',
      inherit: false
    }
  },
  nodes: {
    shape: 'circle'
  }
};

nodes1 = new vis.DataSet([]);

edges1 = new vis.DataSet([]);

data1 = {
  nodes: nodes1,
  edges: edges1
};

network1 = new vis.Network(container1, data1, options1);

clearPopUp2 = function() {
  document.querySelector('#wrapper2 .saveButton').onclick = null;
  document.querySelector('#wrapper2 .cancelButton').onclick = null;
  return document.querySelector('#wrapper2 .network-popUp').style.display = 'none';
};

saveData2 = function(data, callback) {
  data.id = document.querySelector('#wrapper2 .node-id').value;
  data.label = document.querySelector('#wrapper2 .node-label').value;
  clearPopUp2();
  return callback(data);
};

cancelEdit2 = function(callback) {
  clearPopUp2();
  return callback(null);
};

container2 = document.querySelector('#wrapper2 .network');

options2 = {
  width: '600px',
  height: '800px',
  autoResize: false,
  interaction: {
    dragView: false,
    zoomView: false
  },
  manipulation: {
    enabled: true,
    initiallyActive: true,
    addNode: function(data, callback) {
      document.querySelector('#wrapper2 .operation').innerHTML = "Add Node";
      document.querySelector('#wrapper2 .node-id').value = data.id;
      document.querySelector('#wrapper2 .node-label').value = data.label;
      document.querySelector('#wrapper2 .saveButton').onclick = saveData2.bind(this, data, callback);
      document.querySelector('#wrapper2 .cancelButton').onclick = clearPopUp2.bind();
      return document.querySelector('#wrapper2 .network-popUp').style.display = 'block';
    },
    editNode: function(data, callback) {
      document.querySelector('#wrapper2 .operation').innerHTML = "Edit Node";
      document.querySelector('#wrapper2 .node-id').value = data.id;
      document.querySelector('#wrapper2 .node-label').value = data.label;
      document.querySelector('#wrapper2 .saveButton').onclick = saveData2.bind(this, data, callback);
      document.querySelector('#wrapper2 .cancelButton').onclick = cancelEdit2.bind(this, callback);
      return document.querySelector('#wrapper2 .network-popUp').style.display = 'block';
    },
    addEdge: false,
    editEdge: true,
    deleteNode: true,
    deleteEdge: true,
    controlNodeStyle: {}
  },
  physics: {
    enabled: false
  },
  edges: {
    smooth: false,
    color: {
      color: '#2B7CE9',
      highlight: '#2B7CE9',
      inherit: false
    }
  },
  nodes: {
    shape: 'circle'
  }
};

nodes2 = new vis.DataSet([]);

edges2 = new vis.DataSet([]);

data2 = {
  nodes: nodes2,
  edges: edges2
};

network2 = new vis.Network(container2, data2, options2);

$('#morph').on('click', function() {
  var i, j, k, label1, label2, len, len1, ref, ref1, result1, result2, v;
  label1 = new Object();
  ref = nodes1.get();
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    label1[i.label] = [i.x, i.y];
  }
  label2 = new Object();
  ref1 = nodes2.get();
  for (k = 0, len1 = ref1.length; k < len1; k++) {
    i = ref1[k];
    label2[i.label] = [i.x, i.y];
  }
  result1 = [];
  result2 = [];
  for (i in label1) {
    v = label1[i];
    result1.push(label1[i]);
    result2.push(label2[i]);
  }
  return $.ajax({
    url: '/morph',
    type: 'post',
    contentType: 'application/json',
    dataType: 'json',
    data: JSON.stringify({
      points1: result1,
      points2: result2,
      pictures: [p1_url, p2_url]
    }),
    success: function(data) {
      var l, len2, owl, p_url, ref2;
      console.log(data);
      $('.wrapper').hide();
      $('#morph').hide();
      owl = $('.owl-carousel');
      ref2 = data['result'];
      for (l = 0, len2 = ref2.length; l < len2; l++) {
        p_url = ref2[l];
        owl.append('<img class="item" src="' + p_url + '">');
      }
      owl.show();
      owl.owlCarousel({
        items: 10,
        lazyLoad: true,
        loop: false,
        margin: 10,
        center: true,
        autoWidth: true
      });
      return owl.on('mousewheel', '.owl-stage', function(e) {
        if (e.deltaY < 0) {
          owl.trigger('next.owl');
        } else {
          owl.trigger('prev.owl');
        }
        return e.preventDefault();
      });
    }
  });
});

//# sourceMappingURL=morph.js.map
